// Code generated by codegen. DO NOT EDIT!!!

package v1

import (
	"github.com/wujie1993/waves/pkg/e"
	"github.com/wujie1993/waves/pkg/orm/core"
)

var helper Helper

func init() {
	helper = Helper{
		App:         NewAppRegistry(),
		AppInstance: NewAppInstanceRegistry(),
		Audit:       NewAuditRegistry(),
		ConfigMap:   NewConfigMapRegistry(),
		Event:       NewEventRegistry(),
		GPU:         NewGPURegistry(),
		Host:        NewHostRegistry(),
		Job:         NewJobRegistry(),
		K8sConfig:   NewK8sConfigRegistry(),
		Namespace:   NewNamespaceRegistry(),
		Pkg:         NewPkgRegistry(),
		Project:     NewProjectRegistry(),
		Revision:    NewRevisionRegistry(),
	}
}

// Helper 对v1版本所有实体对象的操作封装
type Helper struct {
	App         AppRegistry
	AppInstance AppInstanceRegistry
	Audit       AuditRegistry
	ConfigMap   ConfigMapRegistry
	Event       EventRegistry
	GPU         GPURegistry
	Host        HostRegistry
	Job         JobRegistry
	K8sConfig   K8sConfigRegistry
	Namespace   NamespaceRegistry
	Pkg         PkgRegistry
	Project     ProjectRegistry
	Revision    RevisionRegistry
}

func GetHelper() Helper {
	return helper
}

// New 创建一个新的实体对象
func New(kind string) (core.ApiObject, error) {
	switch kind {

	case core.KindApp:
		return NewApp(), nil

	case core.KindAppInstance:
		return NewAppInstance(), nil

	case core.KindAudit:
		return NewAudit(), nil

	case core.KindConfigMap:
		return NewConfigMap(), nil

	case core.KindEvent:
		return NewEvent(), nil

	case core.KindGPU:
		return NewGPU(), nil

	case core.KindHost:
		return NewHost(), nil

	case core.KindJob:
		return NewJob(), nil

	case core.KindK8sConfig:
		return NewK8sConfig(), nil

	case core.KindNamespace:
		return NewNamespace(), nil

	case core.KindPkg:
		return NewPkg(), nil

	case core.KindProject:
		return NewProject(), nil

	case core.KindRevision:
		return NewRevision(), nil

	default:
		return nil, e.Errorf("unknown kind of %s within v1", kind)
	}
}
