package tpls

import (
	"bytes"
	"os"
	"strings"
	"text/template"

	log "github.com/sirupsen/logrus"
)

const (
	HASH_CODE_TPL = `
package {{ .Package }}

import (
	"crypto/sha256"
	"encoding/json"
	"fmt"
)
{{ range .ApiObjects }}
func (obj {{ . }}) Sha256() string {
	data, _ := json.Marshal(obj)
	return fmt.Sprintf("%x", sha256.Sum256(data))
}
{{ end }}
`
	ENCODE_CODE_TPL = `
package {{ .Package }}

import (
        "encoding/json"

	"github.com/ghodss/yaml"
)
{{ range .ApiObjects }}
// ToJSON is auto generated by codegen, marshal to json bytes
func (obj {{ . }}) ToJSON() ([]byte, error) {
        return json.Marshal(obj)
}

// ToJSONPretty is auto generated by codegen, marshal to json bytes with pretty format
func (obj {{ . }}) ToJSONPretty() ([]byte, error) {
	return json.MarshalIndent(obj, "", "\t")
}

// FromJSON is auto generated by codegen, unmarshal from json bytes
func (obj *{{ . }}) FromJSON(data []byte) error {
        return json.Unmarshal(data, obj)
}

// ToYAML is auto generated by codegen, marshal to yaml bytes
func (obj {{ . }}) ToYAML() ([]byte, error) {
        return yaml.Marshal(obj)
}

// FromYAML is auto generated by codegen, unmarshal from yaml bytes
func (obj *{{ . }}) FromYAML(data []byte) error {
        return yaml.Unmarshal(data, obj)
}
{{ end }}
`
	DEEP_COPY_CODE_TPL = `
package {{ .Package }}

import (
	"github.com/wujie1993/waves/pkg/orm/core"
)
{{ range .ApiObjects }}
// DeepCopyInto is auto generated by codegen, copy public fields into the *{{ . }}
func (src {{ . }}) DeepCopyInto(dst *{{ . }}) error {
        return core.DeepCopy(src, dst)
}

// DeepCopy is auto generated by codegen, create and copy public fields into the new *{{ . }}
func (src {{ . }}) DeepCopy() *{{ . }} {
	dst := new({{ . }})
	src.DeepCopyInto(dst)
	return dst
}

// DeepCopyApiObject is auto generated by codegen, deep copy and return as ApiObject
func (src {{ . }}) DeepCopyApiObject() core.ApiObject {
	return src.DeepCopy()
}
{{ end }}
`
	HELPER_CODE_TPL = `
package {{ .Package }}

import (
	"github.com/wujie1993/waves/pkg/e"
	"github.com/wujie1993/waves/pkg/orm/core"
)

var helper Helper

func init() {
	helper = Helper{
		{{ range .Registries }}
		{{- .Name }}:	New{{ .Registry }}(),
		{{ end }}
	}
}

// Helper 对{{ .Package }}版本所有实体对象的操作封装
type Helper struct {
	{{ range .Registries }}
	{{- .Name }}	{{ .Registry }}
	{{ end }}
}

func GetHelper() Helper {
	return helper
}

// New 创建一个新的实体对象
func New(kind string) (core.ApiObject, error) {
	switch kind {
	{{- range .ApiObjects }}
	case core.Kind{{ . }}:
		return New{{ . }}(), nil
	{{- end }}
	default:
		return nil, e.Errorf("unknown kind of %s within {{ .Package }}", kind)
	}
}
`
)

type CodeTpl struct {
	Package    string
	ApiObjects []string
	Registries []RegistryTpl
}

type RegistryTpl struct {
	Name       string
	Registry   string
	Namespaced bool
}

type SortRegistry []RegistryTpl

func (s SortRegistry) Len() int {
	return len(s)
}

func (s SortRegistry) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}

func (s SortRegistry) Less(i, j int) bool {
	return strings.Compare(s[i].Name, s[j].Name) < 0
}

func RenderCodeFile(data interface{}, text string, path string) error {
	codes, err := RenderCode(data, text)
	if err != nil {
		log.Error(err)
		return err
	}

	f, err := os.OpenFile(path, os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0664)
	if err != nil {
		log.Error(err)
		return err
	}
	if _, err := f.WriteString("// Code generated by codegen. DO NOT EDIT!!!\n\n" + codes); err != nil {
		log.Error(err)
		return err
	}
	return nil
}

func RenderCode(data interface{}, text string) (string, error) {
	funcMap := template.FuncMap{}
	funcMap["ToLower"] = strings.ToLower

	tpl, err := template.New("json").Funcs(funcMap).Parse(text)
	if err != nil {
		return "", err
	}

	var buffer bytes.Buffer
	if err := tpl.Execute(&buffer, data); err != nil {
		return "", err
	}
	return strings.Trim(buffer.String(), "\n"), nil
}
